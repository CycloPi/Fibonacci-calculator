extends KinematicBody2D 
# Esta es una demostración de colisión simple que muestra cómo
# El controlador cinemático funciona.
# Move () permitirá mover el nodo y
# Siempre muévalo a un punto que no colisione,
# Siempre y cuando empiece desde un punto que no colisione demasiado.
# Member variables
var GRAVITY = 800.0 # Pixels/second
# Ángulo en grados hacia ambos lados que el jugador puede considerar "piso"
const FLOOR_ANGLE_TOLERANCE = 40
const WALK_FORCE = 200
const WALK_MIN_SPEED = 10
const WALK_MAX_SPEED = 200
const STOP_FORCE = 1000
const JUMP_SPEED = 250
const JUMP_MAX_AIRBORNE_TIME = 0.2
const SLIDE_STOP_VELOCITY = 1.0 # One pixel per second
const SLIDE_STOP_MIN_TRAVEL = 1.0 # One pixel
var velocity = Vector2()
var on_air_time = 100
var jumping = false
var prev_jump_pressed = false
var dano_jugador  = 100
var escalerita = false
var aguita = false

##### bandera pepo
var banderaPepoD = false

######################
func _fixed_process(delta):
	var walk_left = Input.is_action_pressed("ui_left")
	var walk_right = Input.is_action_pressed("ui_right")
	var jump = Input.is_action_pressed("salto")
	var agacharse = Input.is_action_pressed("ui_down")
	var arriba = Input.is_action_pressed("ui_up")
	var force = Vector2(0, GRAVITY)
	var stop = true
	if (walk_left):
		if (velocity.x <= WALK_MIN_SPEED and velocity.x > -WALK_MAX_SPEED):
			force.x -= WALK_FORCE
			stop = false
			get_node("jugador_imagen").play("correr")
			get_node("jugador_imagen").set_flip_h(true)
			
			get_node("colision_Ignatius").set_scale(Vector2(1 , 1))
			get_node("colision_Ignatius").set_pos(Vector2(0 , 0))
			get_node("proyectil_spawn").set_pos(Vector2(0 , 0))
			if (agacharse):
				get_node("jugador_imagen").play("agachado")
				get_node("jugador_imagen").set_flip_h(true)
				
				get_node("colision_Ignatius").set_scale(Vector2(1 , 0.5))
				get_node("colision_Ignatius").set_pos(Vector2(0 , 12))
				get_node("proyectil_spawn").set_pos(Vector2(0 , 11))
	elif (walk_right or banderaPepoD):
		if (velocity.x >= -WALK_MIN_SPEED and velocity.x < WALK_MAX_SPEED):
			force.x += WALK_FORCE
			stop = false
			get_node("jugador_imagen").play("correr")
			get_node("jugador_imagen").set_flip_h(false)
			
			get_node("colision_Ignatius").set_scale(Vector2(1 , 1))
			get_node("colision_Ignatius").set_pos(Vector2(0 , 0))
			get_node("proyectil_spawn").set_pos(Vector2(0 , 0))
			
			if (agacharse):
				get_node("jugador_imagen").play("agachado")
				get_node("jugador_imagen").set_flip_h(false)
				
				get_node("colision_Ignatius").set_scale(Vector2(1 , 0.5))
				get_node("colision_Ignatius").set_pos(Vector2(0 , 12))
				get_node("proyectil_spawn").set_pos(Vector2(0 , 12))
	if (stop):
		var vsign = sign(velocity.x)
		var vlen = abs(velocity.x)
		
		vlen -= STOP_FORCE*delta
		if (vlen < 0):
			vlen = 0
		
		velocity.x = vlen*vsign
		get_node("jugador_imagen").play("parado")
		
		get_node("colision_Ignatius").set_scale(Vector2(1 , 1))
		get_node("colision_Ignatius").set_pos(Vector2(0 , 0))
		get_node("proyectil_spawn").set_pos(Vector2(0 , 0))
		if (agacharse):
				get_node("jugador_imagen").play("agachado")
				
				get_node("colision_Ignatius").set_scale(Vector2(1 , 0.5))
				get_node("colision_Ignatius").set_pos(Vector2(0 , 12))
				get_node("proyectil_spawn").set_pos(Vector2(0 , 12))
######################Integrate forces to velocity
	velocity += force*delta
	
	# Integrate velocity into motion and move
	var motion = velocity*delta
	
	# Move and consume motion
	motion = move(motion)
	
	var floor_velocity = Vector2()
	
	if (is_colliding()):
		# You can check which tile was collision against with this
		# print(get_collider_metadata())
		
		var golpeado = get_collider().get_groups()
		
#		
		# Ran against something, is it the floor? Get normal
		var n = get_collision_normal()
		
		if (rad2deg(acos(n.dot(Vector2(0, -1)))) < FLOOR_ANGLE_TOLERANCE):
			# If angle to the "up" vectors is < angle tolerance
			# char is on floor
			on_air_time = 0
			floor_velocity = get_collider_velocity()
		
		if (on_air_time == 0 and force.x == 0 and get_travel().length() < SLIDE_STOP_MIN_TRAVEL and abs(velocity.x) < SLIDE_STOP_VELOCITY and get_collider_velocity() == Vector2()):
			# Since this formula will always slide the character around, 
			# a special case must be considered to to stop it from moving 
			# if standing on an inclined floor. Conditions are:
			# 1) Standing on floor (on_air_time == 0)
			# 2) Did not move more than one pixel (get_travel().length() < SLIDE_STOP_MIN_TRAVEL)
			# 3) Not moving horizontally (abs(velocity.x) < SLIDE_STOP_VELOCITY)
			# 4) Collider is not moving
			
			revert_motion()
			velocity.y = 0.0
		else:
			# For every other case of motion, our motion was interrupted.
			# Try to complete the motion by "sliding" by the normal
			motion = n.slide(motion)
			velocity = n.slide(velocity)
			# Then move again
			move(motion)
	
	if (floor_velocity != Vector2()):
		# If floor moves, move with floor
		move(floor_velocity*delta)
	
	if (jumping and velocity.y > 0):
		# If falling, no longer jumping
		jumping = false
	
	if (on_air_time < JUMP_MAX_AIRBORNE_TIME and jump and not prev_jump_pressed and not jumping):
		# Jump must also be allowed to happen if the character left the floor a little bit ago.
		# Makes controls more snappy.
		velocity.y = -JUMP_SPEED
		jumping = true
	
	on_air_time += delta
	prev_jump_pressed = jump

############### analogico ###############
func analog_force_change(inForce, inAnalog):
	var GRAVITY = 800.0 # Pixels/second
	var velocity = Vector2()
	var on_air_time = 100
	var jumping = false
	var prev_jump_pressed = false
	
	
	
	var walk_left = Input.is_action_pressed("ui_left")
	var walk_right = Input.is_action_pressed("ui_right")
	var jump = Input.is_action_pressed("salto")
	var agacharse = Input.is_action_pressed("ui_down")
	var arriba = Input.is_action_pressed("ui_up")
	var force = Vector2(0, GRAVITY)	
	var stop = true
	if(inAnalog.get_name()=="AnalogLeft"):
#		print(inForce.x)
		if (inForce.x > 0.5) and (inForce.y >-0.5 and inForce.y < 0.5):
			print("derecha")
			print(inForce.x)
			banderaPepoD = true
		if (inForce.y > 0.5) and (inForce.x > -0.5 and inForce.x < 0.5):
			print("arriba")
			arriba
		if (inForce.y < -0.5) and (inForce.x > -0.5 and inForce.x < 0.5):
			print("abajo")
			agacharse
		if (inForce.x < -0.5) and (inForce.y < 0.5 and inForce.y > -0.5):	
			print("izquierda")
			walk_left
		if (inForce.x == 0) and (inForce.y == 0):
			print("parado")
			banderaPepoD = false
			"""
		else:
			banderaPepoD = false
			print("parate hijo puta")
			"""

func _ready():
		
	set_fixed_process(true)
	set_process_input(true)
	set_process(true)
	
